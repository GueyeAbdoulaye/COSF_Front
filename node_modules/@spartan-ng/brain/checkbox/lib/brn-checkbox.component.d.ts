import { BooleanInput } from '@angular/cdk/coercion';
import { type AfterContentInit, ElementRef, type OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ChangeFn, TouchFn } from '@spartan-ng/brain/forms';
import * as i0 from "@angular/core";
export declare const BRN_CHECKBOX_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class BrnCheckboxComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {
    private readonly _destroyRef;
    private readonly _renderer;
    private readonly _elementRef;
    private readonly _focusMonitor;
    private readonly _cdr;
    private readonly _document;
    private readonly _isBrowser;
    protected readonly focusVisible: import("@angular/core").WritableSignal<boolean>;
    protected readonly focused: import("@angular/core").WritableSignal<boolean>;
    /**
     * Current checked state of checkbox.
     * Can be boolean (true/false) or 'indeterminate'.
     * Can be bound with [(checked)] for two-way binding.
     */
    readonly checked: import("@angular/core").ModelSignal<BrnCheckboxValue>;
    /**
     * Read-only signal of current checkbox state.
     * Use this when you only need to read state without changing it.
     */
    readonly isChecked: import("@angular/core").Signal<BrnCheckboxValue>;
    /**
     * Computed data-state attribute value based on checked state.
     * Returns 'checked', 'unchecked', or 'indeterminate'.
     */
    protected readonly _dataState: import("@angular/core").Signal<"indeterminate" | "checked" | "unchecked">;
    /**
     * Computed aria-checked attribute value for accessibility.
     * Returns 'true', 'false', or 'mixed' (for indeterminate).
     */
    protected readonly _ariaChecked: import("@angular/core").Signal<"mixed" | "true" | "false">;
    /**
     * Unique identifier for checkbox component.
     * When provided, inner button gets ID without '-checkbox' suffix.
     * Auto-generates ID if not provided.
     */
    readonly id: import("@angular/core").InputSignal<string | null>;
    /**
     * Form control name for checkbox.
     * When provided, inner button gets name without '-checkbox' suffix.
     */
    readonly name: import("@angular/core").InputSignal<string | null>;
    /**
     * CSS classes applied to inner button element.
     */
    readonly class: import("@angular/core").InputSignal<string | null>;
    /**
     * Accessibility label for screen readers.
     * Use when no visible label exists.
     */
    readonly ariaLabel: import("@angular/core").InputSignal<string | null>;
    /**
     * ID of element that labels this checkbox for accessibility.
     * Auto-set when checkbox is inside label element.
     */
    readonly ariaLabelledby: import("@angular/core").InputSignal<string | null>;
    readonly mutableAriaLabelledby: import("@angular/core").WritableSignal<string | null>;
    /**
     * ID of element that describes this checkbox for accessibility.
     */
    readonly ariaDescribedby: import("@angular/core").InputSignal<string | null>;
    /**
     * Whether checkbox is required in a form.
     */
    readonly required: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether checkbox is disabled.
     * Disabled checkboxes cannot be toggled and indicate disabled state through data-disabled attribute.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Computed state for checkbox container and accessibility.
     * Manages ID, name, and disabled state.
     */
    protected readonly state: import("@angular/core").Signal<{
        disabled: import("@angular/core").WritableSignal<boolean>;
        name: string | null;
        id: string | null;
    }>;
    protected _onChange: ChangeFn<BrnCheckboxValue>;
    private _onTouched;
    /**
     * Reference to the checkbox button element in the template.
     */
    readonly checkbox: import("@angular/core").Signal<ElementRef<HTMLButtonElement>>;
    /**
     * Event emitted when checkbox value changes.
     * Emits new checked state (true/false/'indeterminate').
     */
    readonly changed: import("@angular/core").OutputEmitterRef<BrnCheckboxValue>;
    /**
     * Event emitted when checkbox is blurred (loses focus).
     * Used for form validation.
     */
    readonly touched: import("@angular/core").OutputEmitterRef<void>;
    constructor();
    /**
     * Toggles checkbox between checked/unchecked states.
     * If checkbox is indeterminate, sets to checked.
     * Does nothing if checkbox is disabled.
     */
    toggle(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Gets proper ID for inner button element.
     * Removes '-checkbox' suffix if present in container ID.
     *
     * @param idPassedToContainer - ID applied to container element
     * @returns ID to use for inner button or null
     */
    protected getCheckboxButtonId(idPassedToContainer: string | null | undefined): string | null;
    /**
     * Updates internal state when control value changes from outside.
     * Handles boolean and 'indeterminate' values.
     * Part of ControlValueAccessor interface.
     *
     * @param value - New checkbox state (true/false/'indeterminate')
     */
    writeValue(value: BrnCheckboxValue): void;
    /**
     * Registers callback for value changes.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when value changes
     */
    registerOnChange(fn: ChangeFn<BrnCheckboxValue>): void;
    /**
     * Registers callback for touched events.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when control is touched
     */
    registerOnTouched(fn: TouchFn): void;
    /**
     * Updates disabled state from form control.
     * Part of ControlValueAccessor interface.
     *
     * @param isDisabled - Whether checkbox should be disabled
     */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnCheckboxComponent, "brn-checkbox", never, { "checked": { "alias": "checked"; "required": false; "isSignal": true; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; "name": { "alias": "name"; "required": false; "isSignal": true; }; "class": { "alias": "class"; "required": false; "isSignal": true; }; "ariaLabel": { "alias": "aria-label"; "required": false; "isSignal": true; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; "isSignal": true; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; "isSignal": true; }; "required": { "alias": "required"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, { "checked": "checkedChange"; "changed": "changed"; "touched": "touched"; }, never, ["*"], true, never>;
}
type BrnCheckboxValue = boolean | 'indeterminate';
export {};
