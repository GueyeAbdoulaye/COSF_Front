import { BooleanInput } from '@angular/cdk/coercion';
import { type AfterContentInit, ElementRef, type OnDestroy } from '@angular/core';
import { ChangeFn, TouchFn } from '@spartan-ng/brain/forms';
import * as i0 from "@angular/core";
export declare const BRN_SWITCH_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly import("@angular/forms").ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class BrnSwitchComponent implements AfterContentInit, OnDestroy {
    private readonly _destroyRef;
    private readonly _renderer;
    private readonly _isBrowser;
    private readonly _elementRef;
    private readonly _focusMonitor;
    private readonly _cdr;
    private readonly _document;
    protected readonly focusVisible: import("@angular/core").WritableSignal<boolean>;
    protected readonly focused: import("@angular/core").WritableSignal<boolean>;
    /**
     * Whether switch is checked/toggled on.
     * Can be bound with [(checked)] for two-way binding.
     */
    readonly checked: import("@angular/core").ModelSignal<boolean>;
    /**
     * Unique identifier for switch component.
     * When provided, inner button gets ID without '-switch' suffix.
     * Auto-generates ID if not provided.
     */
    readonly id: import("@angular/core").InputSignal<string | null>;
    /**
     * Form control name for switch.
     * When provided, inner button gets name without '-switch' suffix.
     */
    readonly name: import("@angular/core").InputSignal<string | null>;
    /**
     * CSS classes applied to inner button element.
     */
    readonly class: import("@angular/core").InputSignal<string | null>;
    /**
     * Accessibility label for screen readers.
     * Use when no visible label exists.
     */
    readonly ariaLabel: import("@angular/core").InputSignal<string | null>;
    /**
     * ID of element that labels this switch for accessibility.
     * Auto-set when switch is inside label element.
     */
    readonly ariaLabelledby: import("@angular/core").InputSignal<string | null>;
    readonly mutableAriaLabelledby: import("@angular/core").WritableSignal<string | null>;
    /**
     * ID of element that describes this switch for accessibility.
     */
    readonly ariaDescribedby: import("@angular/core").InputSignal<string | null>;
    /**
     * Whether switch is required in a form.
     */
    readonly required: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether switch is disabled.
     * Disabled switches cannot be toggled and indicate disabled state with data attribute.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Keyboard tab order for switch.
     * @default 0
     */
    readonly tabIndex: import("@angular/core").InputSignal<number>;
    /**
     * Event emitted when switch value changes.
     * Emits new checked state (true/false).
     */
    readonly changed: import("@angular/core").OutputEmitterRef<boolean>;
    /**
     * Event emitted when switch is blurred (loses focus).
     * Used for form validation.
     */
    readonly touched: import("@angular/core").OutputEmitterRef<void>;
    protected _onChange: ChangeFn<boolean>;
    private _onTouched;
    readonly switch: import("@angular/core").Signal<ElementRef<HTMLInputElement>>;
    protected readonly state: import("@angular/core").Signal<{
        disabled: import("@angular/core").WritableSignal<boolean>;
        name: string | null;
        id: string | null;
    }>;
    constructor();
    /**
     * Toggles switch between checked/unchecked states.
     * Does nothing if switch is disabled.
     */
    protected toggle(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Gets proper ID for inner button element.
     * Removes '-switch' suffix if present in container ID.
     *
     * @param idPassedToContainer - ID applied to container element
     * @returns ID to use for inner button or null
     */
    protected getSwitchButtonId(idPassedToContainer: string | null | undefined): string | null;
    /**
     * Updates internal state when control value changes from outside.
     * Part of ControlValueAccessor interface.
     *
     * @param value - New checked state
     */
    writeValue(value: boolean): void;
    /**
     * Registers callback for value changes.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when value changes
     */
    registerOnChange(fn: ChangeFn<boolean>): void;
    /**
     * Registers callback for touched events.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when control is touched
     */
    registerOnTouched(fn: TouchFn): void;
    /**
     * Updates disabled state from form control.
     * Part of ControlValueAccessor interface.
     *
     * @param isDisabled - Whether switch should be disabled
     */
    setDisabledState: (isDisabled: boolean) => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSwitchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnSwitchComponent, "brn-switch", never, { "checked": { "alias": "checked"; "required": false; "isSignal": true; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; "name": { "alias": "name"; "required": false; "isSignal": true; }; "class": { "alias": "class"; "required": false; "isSignal": true; }; "ariaLabel": { "alias": "aria-label"; "required": false; "isSignal": true; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; "isSignal": true; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; "isSignal": true; }; "required": { "alias": "required"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "tabIndex": { "alias": "tabIndex"; "required": false; "isSignal": true; }; }, { "checked": "checkedChange"; "changed": "changed"; "touched": "touched"; }, never, ["brn-switch-thumb"], true, never>;
}
