import * as i0 from '@angular/core';
import { ChangeDetectionStrategy, Component, forwardRef, inject, DestroyRef, Renderer2, PLATFORM_ID, ElementRef, ChangeDetectorRef, signal, model, input, linkedSignal, booleanAttribute, output, viewChild, computed, effect, NgModule } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class BrnSwitchThumbComponent {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchThumbComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.8", type: BrnSwitchThumbComponent, isStandalone: true, selector: "brn-switch-thumb", host: { attributes: { "role": "presentation" }, listeners: { "click": "$event.preventDefault()" } }, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchThumbComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-switch-thumb',
                    template: '',
                    host: {
                        role: 'presentation',
                        '(click)': '$event.preventDefault()',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

const BRN_SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BrnSwitchComponent),
    multi: true,
};
const CONTAINER_POST_FIX = '-switch';
let uniqueIdCounter = 0;
class BrnSwitchComponent {
    _destroyRef = inject(DestroyRef);
    _renderer = inject(Renderer2);
    _isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    _elementRef = inject(ElementRef);
    _focusMonitor = inject(FocusMonitor);
    _cdr = inject(ChangeDetectorRef);
    _document = inject(DOCUMENT);
    focusVisible = signal(false);
    focused = signal(false);
    /**
     * Whether switch is checked/toggled on.
     * Can be bound with [(checked)] for two-way binding.
     */
    checked = model(false);
    /**
     * Unique identifier for switch component.
     * When provided, inner button gets ID without '-switch' suffix.
     * Auto-generates ID if not provided.
     */
    id = input(uniqueIdCounter++ + '');
    /**
     * Form control name for switch.
     * When provided, inner button gets name without '-switch' suffix.
     */
    name = input(null);
    /**
     * CSS classes applied to inner button element.
     */
    class = input(null);
    /**
     * Accessibility label for screen readers.
     * Use when no visible label exists.
     */
    ariaLabel = input(null, { alias: 'aria-label' });
    /**
     * ID of element that labels this switch for accessibility.
     * Auto-set when switch is inside label element.
     */
    ariaLabelledby = input(null, { alias: 'aria-labelledby' });
    mutableAriaLabelledby = linkedSignal(() => this.ariaLabelledby());
    /**
     * ID of element that describes this switch for accessibility.
     */
    ariaDescribedby = input(null, { alias: 'aria-describedby' });
    /**
     * Whether switch is required in a form.
     */
    required = input(false, { transform: booleanAttribute });
    /**
     * Whether switch is disabled.
     * Disabled switches cannot be toggled and indicate disabled state with data attribute.
     */
    disabled = input(false, {
        transform: booleanAttribute,
    });
    /**
     * Keyboard tab order for switch.
     * @default 0
     */
    tabIndex = input(0);
    /**
     * Event emitted when switch value changes.
     * Emits new checked state (true/false).
     */
    changed = output();
    /**
     * Event emitted when switch is blurred (loses focus).
     * Used for form validation.
     */
    touched = output();
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _onChange = () => { };
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _onTouched = () => { };
    switch = viewChild.required('switch');
    state = computed(() => {
        const name = this.name();
        const id = this.id();
        return {
            disabled: signal(this.disabled()),
            name: name ? name + CONTAINER_POST_FIX : null,
            id: id ? id + CONTAINER_POST_FIX : null,
        };
    });
    constructor() {
        effect(() => {
            const state = this.state();
            const isDisabled = state.disabled();
            if (!this._elementRef.nativeElement || !this._isBrowser)
                return;
            const newLabelId = state.id + '-label';
            const switchButtonId = this.getSwitchButtonId(state.id);
            const labelElement = this._elementRef.nativeElement.closest('label') ??
                this._document.querySelector(`label[for="${switchButtonId}"]`);
            if (!labelElement)
                return;
            const existingLabelId = labelElement.id;
            this._renderer.setAttribute(labelElement, 'data-disabled', isDisabled ? 'true' : 'false');
            this.mutableAriaLabelledby.set(existingLabelId || newLabelId);
            if (!existingLabelId || existingLabelId.length === 0) {
                this._renderer.setAttribute(labelElement, 'id', newLabelId);
            }
        });
    }
    /**
     * Toggles switch between checked/unchecked states.
     * Does nothing if switch is disabled.
     */
    toggle() {
        if (this.state().disabled())
            return;
        this._onTouched();
        this.touched.emit();
        this.checked.update((checked) => !checked);
        this._onChange(this.checked());
        this.changed.emit(this.checked());
    }
    ngAfterContentInit() {
        this._focusMonitor
            .monitor(this._elementRef, true)
            .pipe(takeUntilDestroyed(this._destroyRef))
            .subscribe((focusOrigin) => {
            if (focusOrigin)
                this.focused.set(true);
            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {
                this.focusVisible.set(true);
                this._cdr.markForCheck();
            }
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state
                // change (such as a form control's ng-touched) will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this.focusVisible.set(false);
                    this.focused.set(false);
                    this._onTouched();
                    this.touched.emit();
                    this._cdr.markForCheck();
                });
            }
        });
        if (!this.switch())
            return;
        this.switch().nativeElement.value = this.checked() ? 'on' : 'off';
        this.switch().nativeElement.dispatchEvent(new Event('change'));
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /**
     * Gets proper ID for inner button element.
     * Removes '-switch' suffix if present in container ID.
     *
     * @param idPassedToContainer - ID applied to container element
     * @returns ID to use for inner button or null
     */
    getSwitchButtonId(idPassedToContainer) {
        return idPassedToContainer ? idPassedToContainer.replace(CONTAINER_POST_FIX, '') : null;
    }
    /**
     * Updates internal state when control value changes from outside.
     * Part of ControlValueAccessor interface.
     *
     * @param value - New checked state
     */
    writeValue(value) {
        this.checked.set(Boolean(value));
    }
    /**
     * Registers callback for value changes.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when value changes
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Registers callback for touched events.
     * Part of ControlValueAccessor interface.
     *
     * @param fn - Function to call when control is touched
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Updates disabled state from form control.
     * Part of ControlValueAccessor interface.
     *
     * @param isDisabled - Whether switch should be disabled
     */
    setDisabledState = (isDisabled) => {
        this.state().disabled.set(isDisabled);
        this._cdr.markForCheck();
    };
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.2.0", version: "19.2.8", type: BrnSwitchComponent, isStandalone: true, selector: "brn-switch", inputs: { checked: { classPropertyName: "checked", publicName: "checked", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, class: { classPropertyName: "class", publicName: "class", isSignal: true, isRequired: false, transformFunction: null }, ariaLabel: { classPropertyName: "ariaLabel", publicName: "aria-label", isSignal: true, isRequired: false, transformFunction: null }, ariaLabelledby: { classPropertyName: "ariaLabelledby", publicName: "aria-labelledby", isSignal: true, isRequired: false, transformFunction: null }, ariaDescribedby: { classPropertyName: "ariaDescribedby", publicName: "aria-describedby", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "required", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null }, tabIndex: { classPropertyName: "tabIndex", publicName: "tabIndex", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "checkedChange", changed: "changed", touched: "touched" }, host: { properties: { "style": "{display: \"contents\"}", "attr.id": "state().id", "attr.name": "state().name", "attr.aria-labelledby": "null", "attr.aria-label": "null", "attr.aria-describedby": "null", "attr.data-state": "checked() ? \"checked\" : \"unchecked\"", "attr.data-focus-visible": "focusVisible()", "attr.data-focus": "focused()", "attr.data-disabled": "state().disabled()" } }, providers: [BRN_SWITCH_VALUE_ACCESSOR], viewQueries: [{ propertyName: "switch", first: true, predicate: ["switch"], descendants: true, isSignal: true }], ngImport: i0, template: `
		<button
			#switch
			role="switch"
			type="button"
			[class]="class()"
			[id]="getSwitchButtonId(state().id) ?? ''"
			[name]="getSwitchButtonId(state().name) ?? ''"
			[value]="checked() ? 'on' : 'off'"
			[attr.aria-checked]="checked()"
			[attr.aria-label]="ariaLabel() || null"
			[attr.aria-labelledby]="mutableAriaLabelledby() || null"
			[attr.aria-describedby]="ariaDescribedby() || null"
			[attr.data-state]="checked() ? 'checked' : 'unchecked'"
			[attr.data-focus-visible]="focusVisible()"
			[attr.data-focus]="focused()"
			[attr.data-disabled]="state().disabled()"
			[disabled]="state().disabled()"
			[tabIndex]="tabIndex()"
			(click)="$event.preventDefault(); toggle()"
		>
			<ng-content select="brn-switch-thumb" />
		</button>
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-switch',
                    template: `
		<button
			#switch
			role="switch"
			type="button"
			[class]="class()"
			[id]="getSwitchButtonId(state().id) ?? ''"
			[name]="getSwitchButtonId(state().name) ?? ''"
			[value]="checked() ? 'on' : 'off'"
			[attr.aria-checked]="checked()"
			[attr.aria-label]="ariaLabel() || null"
			[attr.aria-labelledby]="mutableAriaLabelledby() || null"
			[attr.aria-describedby]="ariaDescribedby() || null"
			[attr.data-state]="checked() ? 'checked' : 'unchecked'"
			[attr.data-focus-visible]="focusVisible()"
			[attr.data-focus]="focused()"
			[attr.data-disabled]="state().disabled()"
			[disabled]="state().disabled()"
			[tabIndex]="tabIndex()"
			(click)="$event.preventDefault(); toggle()"
		>
			<ng-content select="brn-switch-thumb" />
		</button>
	`,
                    host: {
                        '[style]': '{display: "contents"}',
                        '[attr.id]': 'state().id',
                        '[attr.name]': 'state().name',
                        '[attr.aria-labelledby]': 'null',
                        '[attr.aria-label]': 'null',
                        '[attr.aria-describedby]': 'null',
                        '[attr.data-state]': 'checked() ? "checked" : "unchecked"',
                        '[attr.data-focus-visible]': 'focusVisible()',
                        '[attr.data-focus]': 'focused()',
                        '[attr.data-disabled]': 'state().disabled()',
                    },
                    providers: [BRN_SWITCH_VALUE_ACCESSOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: () => [] });

const BrnSwitchImports = [BrnSwitchComponent, BrnSwitchThumbComponent];
class BrnSwitchModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchModule, imports: [BrnSwitchComponent, BrnSwitchThumbComponent], exports: [BrnSwitchComponent, BrnSwitchThumbComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnSwitchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnSwitchImports],
                    exports: [...BrnSwitchImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BRN_SWITCH_VALUE_ACCESSOR, BrnSwitchComponent, BrnSwitchImports, BrnSwitchModule, BrnSwitchThumbComponent };
//# sourceMappingURL=spartan-ng-brain-switch.mjs.map
