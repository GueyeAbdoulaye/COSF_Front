import { BrnTabsContentDirective } from './brn-tabs-content.directive';
import { BrnTabsTriggerDirective } from './brn-tabs-trigger.directive';
import * as i0 from "@angular/core";
export type BrnTabsOrientation = 'horizontal' | 'vertical';
export type BrnTabsDirection = 'ltr' | 'rtl';
export type BrnActivationMode = 'automatic' | 'manual';
export type TabEntry = {
    trigger: BrnTabsTriggerDirective;
    content: BrnTabsContentDirective;
};
export declare class BrnTabsDirective {
    readonly orientation: import("@angular/core").InputSignal<BrnTabsOrientation>;
    /** internal **/
    $orientation: import("@angular/core").InputSignal<BrnTabsOrientation>;
    readonly direction: import("@angular/core").InputSignal<BrnTabsDirection>;
    /** internal **/
    $direction: import("@angular/core").InputSignal<BrnTabsDirection>;
    readonly _activeTab: import("@angular/core").ModelSignal<string | undefined>;
    /** internal **/
    $activeTab: import("@angular/core").Signal<string | undefined>;
    readonly activationMode: import("@angular/core").InputSignal<BrnActivationMode>;
    /** internal **/
    $activationMode: import("@angular/core").InputSignal<BrnActivationMode>;
    readonly tabActivated: import("@angular/core").OutputEmitterRef<string>;
    private readonly _tabs;
    readonly $tabs: import("@angular/core").Signal<{
        [key: string]: TabEntry;
    }>;
    registerTrigger(key: string, trigger: BrnTabsTriggerDirective): void;
    registerContent(key: string, content: BrnTabsContentDirective): void;
    unregisterTrigger(key: string): void;
    unregisterContent(key: string): void;
    private updateEntry;
    emitTabActivated(key: string): void;
    setActiveTab(key: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTabsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnTabsDirective, "[brnTabs]", ["brnTabs"], { "orientation": { "alias": "orientation"; "required": false; "isSignal": true; }; "direction": { "alias": "direction"; "required": false; "isSignal": true; }; "_activeTab": { "alias": "brnTabs"; "required": false; "isSignal": true; }; "activationMode": { "alias": "activationMode"; "required": false; "isSignal": true; }; }, { "_activeTab": "brnTabsChange"; "tabActivated": "tabActivated"; }, never, never, true, never>;
}
